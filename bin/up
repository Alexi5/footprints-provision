#!/bin/bash

set -euo pipefail

if ! [ -x "$(command -v terraform)" ]; then
  echo 'Error: Terraform is not installed. Download it here: https://www.terraform.io/downloads.html' >&2
  exit 1
fi

if ! [ -x "$(command -v aws)" ]; then
  echo 'Error: The AWS CLI tool is not installed. Download it here: https://docs.aws.amazon.com/cli/latest/userguide/installing.html' >&2
  exit 1
fi

if ! [ -x "$(command -v ansible-playbook)" ]; then
  echo 'Error: Ansible is not installed. Download it here: https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html' >&2
  exit 1
fi

if ! [ -x "$(command -v jq)" ]; then
  echo 'Error: jq is not installed. Download it here: https://stedolan.github.io/jq/' >&2
  exit 1
fi

source .env

cd terraform;

terraform init;

terraform apply;

blue_ec2_ip=$(terraform output blue_ec2_ip);

green_ec2_ip=$(terraform output green_ec2_ip);

production_elb_domain=$(terraform output production_elb_domain);

# Export the database credentials for placing in the template for db config
database_host=$(terraform output footprints_db_host);
database_name=$(terraform output footprints_db_name);
database_user=$(terraform output footprints_db_user);
database_pass=$(terraform output footprints_db_pass);

# Set up the Ansible hosts file to point to the EC2 instances created by
# the Terraform script
cat > ./../ansible/ansible_hosts << EOF
all:
  vars:
    database_host: $database_host
    database_name: $database_name
    database_user: $database_user
    database_pass: $database_pass
    omniauth_client_id: $OMNIAUTH_CLIENT_ID
    omniauth_client_secret: $OMNIAUTH_CLIENT_SECRET

blue:
  hosts:
    $blue_ec2_ip:
  vars:
    color: blue

green:
  hosts:
    $green_ec2_ip:
  vars:
    color: green
EOF

cd ./../ansible

ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook --private-key=~/.ssh/mongeese-footprints -i ansible_hosts playbook.yml;

echo "Visit the URL http://$production_elb_domain to see the current active state of your application.";
